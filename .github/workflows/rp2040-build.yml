name: Build and Publish RP2040 Application
on:
  push:
    tags:
      - "*"
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        target: ["rp2040"]
    defaults:
      run:
        working-directory: "rp2040"
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Checkout pico-sdk/develop
      uses: actions/checkout@v4
      with:
        repository: raspberrypi/pico-sdk
        ref: develop
        path: pico-sdk

    - name: Checkout pico-sdk submodules
      working-directory: ${{github.workspace}}/pico-sdk
      run: git submodule update --init

    - name: arm-none-eabi-gcc
      uses: fiam/arm-none-eabi-gcc@v1
      with:
        release: '9-2019-q4' # The arm-none-eabi-gcc release to use.
    - run: arm-none-eabi-gcc -v

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      working-directory: ${{github.workspace}}
      run:  cmake -E make_directory ${{github.workspace}}/${{ matrix.target }}/main/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/${{ matrix.target }}/main/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: PICO_SDK_PATH=${{github.workspace}}/pico-sdk cmake ../.. -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Get core count
      id: core_count
      run : cat /proc/cpuinfo  | grep processor | wc -l

    - name: Build
      working-directory: ${{github.workspace}}/${{ matrix.target }}/main/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: |
        cmake --build ${{github.workspace}}/${{matrix.target}} --config $BUILD_TYPE --parallel $(nproc)

  #   - name: Upload
  #     uses: actions/upload-artifact@v4
  #     with:
  #         name: nes-${{ matrix.target }}
  #         path: "esp32/*.bin"

  # release:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Download Firmware Files
  #       uses: actions/download-artifact@v4
  #       with:
  #         path: build
